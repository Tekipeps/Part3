{"version":3,"sources":["services/personService.js","components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","object","post","id","delete","put","Filter","newFilter","handleFilterChange","value","onChange","PersonForm","newName","newNumber","handleNameChange","handleNumberChange","handleSubmit","onSubmit","type","Persons","filtered","handleDelete","map","person","key","name","number","onClick","Notification","message","className","App","useState","persons","setPersons","setNewName","setNewNumber","setNewFilter","setMessage","notificationType","setNotificationType","filter","toLowerCase","includes","useEffect","personService","event","target","preventDefault","duplicatePerson","find","window","confirm","res","catch","err","console","log","trim","error","setTimeout","p","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.56e1f342.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (object) => {\n  const request = axios.post(baseUrl, object);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, object) => {\n  const request = axios.put(`${baseUrl}/${id}`, object);\n  return request.then((response) => response.data);\n};\n\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then((response) => response);\n};\n\nexport default { getAll, create, remove, update}","import React from \"react\";\n\nconst Filter = ({ newFilter, handleFilterChange }) => {\n  return (\n    <div>\n      filter shown with{\" \"}\n      <input value={newFilter} onChange={handleFilterChange} />\n    </div>\n  );\n};\n\nexport default Filter;","import React from \"react\";\n\nconst PersonForm = ({newName, newNumber, handleNameChange, handleNumberChange, handleSubmit}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        name: <input value={newName} onChange={handleNameChange} />\n      </div>\n      <div>\n        number: <input value={newNumber} onChange={handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default PersonForm;\n","import React from \"react\";\n\nconst Persons = ({ filtered, handleDelete }) => {\n  return (\n    <div>\n      {filtered.map((person) => (\n        <p key={person.id}>\n          {person.name} {person.number}\n          <button onClick={() => handleDelete(person)}>delete</button>\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default Persons;\n","import React from \"react\";\n\nconst Notification = ({ message, type }) => {\n  if (message === null) {\n    return null;\n  }\n  return <div className={type}>{message}</div>;\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from \"react\";\nimport personService from \"./services/personService\";\nimport Filter from \"./components/Filter\";\nimport PersonForm from \"./components/PersonForm\";\nimport Persons from \"./components/Persons\";\nimport Notification from \"./components/Notification\";\n\nconst App = () => {\n  const [persons, setPersons] = useState(null);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [newFilter, setNewFilter] = useState(\"\");\n  const [message, setMessage] = useState(null);\n  const [notificationType, setNotificationType] = useState(\"\");\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n  const handFilterChange = (event) => {\n    setNewFilter(event.target.value);\n  };\n  const handleDelete = (person) => {\n    const confirm = window.confirm(`delete ${person.name}?`);\n    if (confirm) {\n      personService\n        .remove(person.id)\n        .then((res) => {\n          setPersons(persons.filter((p) => p.id !== person.id));\n        })\n        .catch((err) => {\n          setNotificationType(\"error\");\n          setMessage(\n            `Information of ${person.name} has already been removed from the server`\n          );\n          setPersons(persons.filter((p) => p.id !== person.id));\n        });\n    }\n    setTimeout(() => {\n      setMessage(null);\n    }, 4000);\n  };\n  const filtered = persons\n    ? persons.filter((person) =>\n        person.name.toLowerCase().includes(newFilter.toLowerCase())\n      )\n    : [];\n\n  useEffect(() => {\n    personService.getAll().then((persons) => {\n      setPersons(persons);\n    });\n  }, []);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const duplicatePerson = persons.find(\n      (person) => person.name.toLowerCase() === newName.toLowerCase()\n    );\n    if (duplicatePerson) {\n      const choice = window.confirm(\n        `${newName} is already added to phonebook, replace the old number with a new one?`\n      );\n      if (choice) {\n        personService\n          .update(duplicatePerson.id, { name: newName, number: newNumber })\n          .then((res) => {\n            setPersons(\n              persons.map((person) => (person.id !== res.id ? person : res))\n            );\n            setNotificationType(\"success\");\n            setMessage(`Changed ${duplicatePerson.name}`);\n          })\n          .catch((err) => console.log(err));\n      }\n    } else {\n      personService\n        .create({\n          name: newName.trim(),\n          number: newNumber.trim(),\n        })\n        .then((person) => {\n          setPersons([...persons, person]);\n          setNotificationType(\"success\");\n          setMessage(`Added ${person.name}`);\n        })\n        .catch((err) => {\n          setNotificationType(\"error\");\n          setMessage(`${err.response.data.error}`);\n        });\n    }\n    setNewName(\"\");\n    setNewNumber(\"\");\n\n    setTimeout(() => {\n      setMessage(null);\n    }, 4000);\n  };\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} type={notificationType} />\n      <Filter newFilter={newFilter} handleFilterChange={handFilterChange} />\n      <h2>add a new</h2>\n      <PersonForm\n        newName={newName}\n        newNumber={newNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        handleSubmit={handleSubmit}\n      />\n      <h2>Numbers</h2>\n      <Persons filtered={filtered} handleDelete={handleDelete} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}